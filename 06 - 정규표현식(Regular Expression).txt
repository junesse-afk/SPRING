정규표현식(Regular Expression, Regex)
- 문자열을 처리하는데 사용된 패턴 기반 문자열(식)
- 정규표현식을 통해 처리할 문자열 패턴을 지정하고
  특정 클래스 또는 함수 등을 사용하여 정규표현식에 해당하는지 여부를 체크
- 주로, 패스워드 규칙(복잡도) 검사나 전화번호 또는 이메일 등의 양식 체크 등(Validation check 라고 함)
- 프로그램 개발 뿐만 아니라 네트워크, 웹 등에서 공통으로 사용 가능한 표준 표현식
  (언어 역시 자바, 자바스크립트 등 다양한 언어에서 활용 가능)

< 정규표현식에 사용되는 패턴 문자 = 메타 문자(Meta character) >
=> 정규표현식 작성 시 x 또는 y 라는 문자를 기준으로 앞 또는 뒤에 기호를 붙여 패턴 지정

[ 일반 기호 ]
1. ^x : x 로 시작하는 문자열
   ex) "x", "xa", "xxx", "xab" 등 => 사용 가능한 문자열(= 패턴 규칙에 부합)
       "ya", "yx", "yyy", "y"  등 => 사용 불가능한 문자열(= 패턴 규칙에 부합X)
   ex2) x 가 숫자라는 의미일 때 : "숫자admin"(O), "숫자123"(O), "admin123"(X)

2. x$ : x 로 끝나는 문자열
   ex) "x", "ax", "xxx", "abx" 등 => 사용 가능한 문자열(= 패턴 규칙에 부합)
       "xy", "xa", "xyz", "xab" 등 => 사용 불가능한 문자열(= 패턴 규칙에 부합X)
-------------------------------------------------------------------------------
만약, x 로 시작해서 x 로 끝나는 문자열일 경우(= 즉, x가 딱 1개만 존재하는 경우)
=> ^x$ : "x"(O), "xy"(X), "x1"(X), "ax"(X)
만약, xy 가 정확히 순서까지 맞는 문자열일 경우
=> ^xy$ : "x"(X), "xy"(O), "yx"(X), "x1"(X), "ax"(X)
-------------------------------------------------------------------------------
3. .x : x 앞에 1개의 문자가 포함되는 문자열
   ex) "ax", "bx", "abxy", "1x" 등 => 사용 가능
       "xa", "xb", "x"    등 => 사용 불가능
   주의! ^.x$ 는 총 2글자 중 두번째(마지막) 글자가 x 여야한다!

4. x+ : x가 1번 이상 반복되는 문자열
   ex) "x", "xx", "xxx" 등

5. x* : x가 0번 이상 반복되는 문자열
   ex) "", "a", "x", "xx", "xxx" 등 
       => 단독으로 사용 시 아무 문자열이나 모두 해당
       => 따라서, 주로 다른 패턴과 결합하여 사용함

6. x? : x가 올 수도 있고, 오지 않을 수도 있는 문자열
   ex) "", "a", "x", "xx", "xxx" 등 
       => 단독으로 사용 시 아무 문자열이나 모두 해당
       => 따라서, 주로 다른 패턴과 결합하여 사용함

7. x|y : x 또는 y 가 포함되는 문자열
   ex) "x", "y", "xy", "1x" 등 => 사용 가능
       "1", "ab"            등 => 사용 불가능
------------------------------------------------------------------------
[ 연습문제 ]
1) xa?y$
=> 시작 문자는 상관없음
=> 문자열 내에서 x가 있을 때
   x 뒤의 문자로 a 가 올 수도 있고, 안 올 수도 있으며,
   그 뒤에 반드시 y 로 끝나는 문자열

ex) "xy"   (O) => x 뒤에 a 는 없지만, 그 뒤가 y로 끝남
    "xay"  (O) => x 뒤에 a 가 오고, 그 뒤가 y로 끝남
    "hixy" (O) => x 앞의 문자열 무관, x 뒤에 a 는 없지만, 그 뒤가 y로 끝남
    "hixzy"(X) => x 앞의 문자열 무관, x 뒤에 a 또는 y 가 아니므로 사용 불가
    "xyz"  (X) => x 뒤에 a 는 없지만, y 가 오더라도 y 로 끝나지 않으므로 사용 불가

2) x|a?y$
=> 시작 문자는 상관없음
=> 문자열 내에서 x가 있는 문자열 또는
   a?y$ 규칙에 부합하는 문자열
   
ex) "xy"(O), "hixy"(O), "hixay"(O), "ay1"(X)
===================================================================================
[ 괄호 문자 ]
1. (xy) : 소괄호 안의 내용(xy)이 그대로 포함되는 문자열(= 괄호 안 문자열의 그룹화)
   ex) "xy"(O), "yx"(X), "axy"(O)

2. x{n} : x 가 n 번만큼 반복되는 문자열(정확히 n번)
   ex) ^x{5}$ : x가 5개 
       "xxxxx"(O), "xxx"(X)

3. x{n,} : x가 n번 이상 반복되는 문자열
   ex) ^x{5,}$ : x가 5개 이상
       "xxxxx"(O), "xxx"(X), "xxxxxxxxxxxx"(O)

4. x{n,m} : x가 n번 이상, m번 이하 반복되는 문자열
   ex) ^x{2,4}$ : x가 2개 이상, 4개 이하
       "xxxxx"(X), "xxx"(O), "xxxxxxxxxxxx"(X) 

5. [] 대괄호는 괄호 내의 구성요소를 종합적으로 확인하는 용도(괄호 안의 내용 중 하나에 대해 일치 여부 검사)
   5-1. [x] : x 가 포함되는 문자 1개
   5-2. [^x] : x가 포함되지 않는 문자 1개(^ 기호를 대괄호 안에 사용 시 부정(NOT)의 의미로 사용)
   5-3. [x-y] : x 부터 y 까지 범위의 문자 1개
        => [A-Z] : 대문자 A 부터 대문자 Z 까지 중 1개
        => [a-z] : 소문자 a 부터 대문자 z 까지 중 1개
        => [0-9] : 숫자 1개
        => [가-힣] : 한글 1개
   => 주로, 중괄호(반복 횟수 지정)와 조합하여 많이 사용함
   ex) ^[가-힣]{2,5}$ : 한글 2 ~ 5글자 사이(주로 한글 이름 확인에 사용)
       ^[A-Z]{2,8}$ : 영문자 대문자 2 ~ 8글자
       ^[A-Za-z]{2,8}$ : 영문자(대문자 또는 소문자) 2 ~ 8글자
       ^[A-Za-z0-9]{4,16}$ : 영문자 또는 숫자 4 ~ 16글자 사이
       ^[A-Za-z][A-Za-z0-9]{3,15}$   
       => 전체 4 ~ 16자리 중 첫글자에는 영문자만 사용 가능하고, 나머지는 영문자, 숫자 사용
          (주의! [A-Za-z] 부분에서 1글자를 처리하므로 나머지 3 ~ 15글자 뒤에서 처리)

   ex2) 식별자 작성 규칙 검사
        1) 첫글자 숫자 사용 불가(= 첫글자는 영문자, 특수문자 $ 와 _, 한글 사용 가능)
        2) 특수문자 $ 와 _ 만 사용 가능
        3) 공백 올 수 없음
        4) 예약어(키워드) 사용 불가
        => 1, 2번 규칙을 적용하여 정규표현식으로 나타낼 경우
           ^[A-Za-z가-힣$_][A-Za-z0-9가-힣$_]{0,}$   또는
           ^[A-Za-z가-힣$_][A-Za-z0-9가-힣$_]*$ 
------------------------------------------
예시) ^a{1}b{2}c{2,4}$ => a 가 1번, 뒤에 b가 2번, 뒤에 c가 2 ~ 4번 반복
      ex) "abbcc"(O), "abbccc"(O), "abbcccc"(O), "abbc"(X), "aabbcc"(X)
===================================================================================
[ 예외 문자 - 자바의 이스케이프 문자(\n) 같은 특정 기능을 수행하는 역할 ]
\^ : 지정된 기호를 패턴으로 인식하지 않고, 일반 문자로 인식(^+\$. 등등)
\d : 숫자 => [0-9] 와 동일
\D : 숫자가 아닌 것 => [^0-9] 와 동일
\s : 공백문자
\S : 공백문자가 아닌 것
\w : 영단어 구성 요소(알파벳, 숫자, 언더스코어(_))
\W : 영단어 구성 요소가 아닌 것
------------------------------------------------------------------
< 유용한 정규 표현식 예 >
1. 한글 이름(2 ~ 5글자) : ^[가-힣]{2,5}$
2. 휴대폰 번호 : ^(010|011)[-\s]?[\d]{3,4}[-\s]?[\d]{4}$
   1) ^(010|011) : 010 으로 시작(010 또는 011 로 시작)
   2) [-\s]? : 1번 뒤에 하이픈(-) 또는 공백이 포함될 수도 있고, 포함되지 않을 수도 있음
   3) [\d]{3,4} : 가운데 숫자는 3자리 ~ 4자리
   4) [-\s]? : 3번 뒤에 하이픈(-) 또는 공백이 포함될 수도 있고, 포함되지 않을 수도 있음
   5) [\d]{4}$ : 마지막 숫자는 4자리로 끝

=======================================================================================
< 자바스크립트에서 정규표현식 사용 >
1. 정규표현식 패턴을 갖는 객체 생성
   1) let 변수명 = new RegExp("패턴문자열");
   2) let 변수명 = /패턴문자열/;
   => 두 가지 방법 중 한 가지 방법을 사용하여 패턴 문자열을 갖는 객체 생성 가능

2. 정규표현식에 부합되는지 유효성 검사
   => 변수명.exec(검사할 문자열) 형태로 사용
   => 검사 결과를 true/false 형태로 판별하여
      적합할 경우 검사 대상 문자열 리턴, 부적합할 경우 null 값 리턴
      (자바스크립트 if 문은 조건에 문자열 등의 어떤 값이 있기만 하면 무조건 true 로 취급,
       null 값은 false 로 취급함)















