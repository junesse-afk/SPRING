[ MyBatis(마이바티스) - https://mybatis.org/mybatis-3/ko/index.html ]
- JDBC 를 대체하는 SQL 매핑 프레임워크
- SQL 을 기반으로 RDBMS 와 자바 등의 언어를 연결시켜주는 역할
- 소스 코드에서 SQL 문장을 분리하여 별도의 XML 파일로 작성한 후 소스 코드와 연결
  => SQL 구문 실행에 필요한 코드의 복잡한 구조를 단순화하는데 사용되는 프레임워크
  (인터페이스 + 어노테이션 조합으로도 작업 가능하지만, XML 파일에 SQL 구문 기술하는 방법 사용)
- 아파치 재단의 iBatis 에서 출발하여 구글에서 새로 개발한 프레임워크가 MyBatis

장점1) 자동 Connection 객체 반환(close)
장점2) 내부적으로 PreparedStatement 객체 사용하여 SQL 구문 처리(자동)
장점3) 리턴 타입 지정을 통해 자동으로 해당 타입 객체 생성 및
       ResultSet 객체 등에 대한 처리(자동)
장점4) 파라미터 지정을 통해 SQL 구문에서 사용할 데이터 전달 처리(자동)
=================================================================================
[ MyBatis 를 활용한 데이터베이스 연동 애플리케이션 개발 과정 ]

< XML 파일 설정 >
1. pom.xml 파일에 MyBatis 라이브러리 추가

<!-- MySQL - JDBC 연동에 필요한 라이브러리 추가 -->
<!-- 1. 스프링에서 JDBC 연동에 필요한 기능을 제공하는 spring-jdbc 라이브러리 -->
<!-- 기존 스프링 버전(${org.springframework-version}) 그대로 사용 -->
<!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-jdbc</artifactId>
    <version>${org.springframework-version}</version>
</dependency>

<!-- 2. MySQL Connector 추가(JDBC 드라이버) -->
<!-- https://mvnrepository.com/artifact/com.mysql/mysql-connector-j -->
<dependency>
    <groupId>com.mysql</groupId>
    <artifactId>mysql-connector-j</artifactId>
    <version>8.0.33</version>
</dependency>

<!-- 3. 커넥션 풀을 관리하는 HikariCP 라이브러리 추가(Tomcat DBCP 대용으로 사용 가능) -->
<!-- Tomcat DBCP 에 비해 가볍고, 빠르고, 안정적인 처리가 가능 -->
<!-- Java 11 이상일 때 5.0.1 버전 사용 -->
<dependency>
   <groupId>com.zaxxer</groupId>
   <artifactId>HikariCP</artifactId>
   <version>5.0.1</version>
</dependency>
		
<!-- 4. MyBatis 활용에 필요한 라이브러리 추가 -->
<!-- 4-1) MyBatis 기본 라이브러리 -->
<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis</artifactId>
    <version>3.5.13</version>
</dependency>
				
<!-- 4-2) MyBatis - Spring 연동 라이브러리 -->
<!-- 주의! 3.x.x 버전 사용 시 JDK 11 에서 오류 발생함(지원되지 않음) -->
<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis-spring</artifactId>
    <version>2.1.1</version>
</dependency>

------------------------------------------------------------------------
2. < root-context.xml 설정 >
- 파일 연 후 아래쪽 탭 중 Namespaces 탭 클릭 후 mybatis-spring 항목 체크
- Source 탭 클릭 후 MyBatis(Hikari CP 포함) 관련 설정 추가(<beans> 태그 사이)

<!-- HikariCP 라이브러리 사용을 위한 설정(커넥션풀 설정) -->
<!-- 1. HikariCP 를 활용한 DB 접속 정보 설정 위해 HikariConfig 객체 설정(JDBC 기본 설정) -->
<!-- com.zaxxer.hikari 패키지의 HikariConfig 클래스 지정 및 속성 설정 -->
<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
	<property name="driverClassName" value="com.mysql.cj.jdbc.Driver"></property>
	<property name="jdbcUrl" value="jdbc:mysql://localhost:3306/study_jsp3"></property>
	<property name="username" value="root"></property>
	<property name="password" value="1234"></property>
</bean>

<!-- 2. HikariCP 를 통해 커넥션을 관리하는 DataSource 객체(HikariDataSource) 설정 -->
<!-- 생성자 파라미터로 1번에서 생성한 HikariConfig 객체 전달 -->
<!-- 커넥션 객체 사용 완료 후 자동으로 close() 메서드 호출하여 커넥션풀에 객체 반환하기 위해 -->
<!-- bean 태그의 destroy-method 속성값으로 "close" 지정 -->
<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
	<constructor-arg ref="hikariConfig"></constructor-arg>
</bean>

<!-- 3. Connection 객체 생성, 쿼리 전달 및 결과 리턴 등의 작업을 수행할 SQLSessionFactory 객체 설정 -->
<!-- MyBatis - Spring 연결을 담당하며, 내부적으로 SQLSession 객체를 통해 작업 수행 -->
<!-- 
주의!
1. 이전에 이미 DataSource 객체 설정이 완료되어 있어야 함
2. <bean> 태그의 id 값, class 값은 고정
3. <property> 태그의 dataSource, configLocation, mapperLocations 이름 고정 
4. configLocation, mapperLocations 속성(항목)에 지정된 각각의 파일(xml)이 실제 위치에 생성되어 있어야 함
   (설정 항목 중 classpath 가 가리키는 기본 위치 : src/main/resources 패키지)
-->
<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	<property name="dataSource" ref="dataSource"></property>
	<property name="configLocation" value="classpath:/mybatis-config.xml"></property>
	<property name="mapperLocations" value="classpath:/com/itwillbs/test3_mybatis/mapper/*Mapper.xml"></property>
</bean>

<!-- 4. MyBatis 연동에 사용될 객체(클래스)들의 패키지 위치 지정(기본 루트 패키지 지정) -->
<mybatis-spring:scan base-package="com.itwillbs.test3_mybatis"/>

-------------------------------------------------------------------------
< Mapper 정의 >
- MyBatis 에서 SQL 구문 작성 및 처리 수행
- 인터페이스 + 어노테이션 사용 또는 XML Mapper 사용 방식으로 나뉨
  => 주로, XML Mapper 사용 방식으로 수업

1. 테이블 생성
2. vo 패키지에 테이블에 대응하는 XXXVO 클래스 정의
3. src/main/java - 기본패키지명.mapper 패키지에 XXXMapper 인터페이스 정의(필수!!)

4. 클래스패스(src/main/resources) 내에 기본패키지명.mapper 패키지 생성 및 XXXMapper.xml 파일 생성
   4-1) XML 파일 생성 시 상단 DTD(Document Type Definition) 를 자동으로 정의하기 위한 방법(선택 사항)
         1) Preferences - XML - XML Catalog
         2) Add 버튼 클릭하여 첫번째 항목 추가
            Location : http://mybatis.org/dtd/mybatis-3-mapper.dtd
            Key : -//mybatis.org//DTD Mapper 3.0//EN
         3) Add 버튼 클릭하여 두번째 항목 추가
            Location : http://mybatis.org/dtd/mybatis-3-config.dtd
            Key : -//mybatis.org//DTD Config 3.0//EN
         4) User Specified Entries 항목에서 두 개의 DTD 항목 생성 확인
   4-2) XML 파일 생성 과정에서 파일명(XXXMapper.xml) 입력 후 Next
          Create file using a DTD - Select XML Catalog entry 선택 후 User Specified Entries 목록에서 
          mybatis-3-mapper.dtd 클릭 후 Next - Finish(선택 사항)
   => 4-1 과 4-2 과정 대신 MyBatis 홈페이지에 있는 XML 파일 내의 dtd 내용을 XML 파일 상단(2번 라인)에 복사해도 된다!
      1) mybatis-config.xml 파일 상단의 DTD 내용
<!DOCTYPE configuration
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-config.dtd">
       
      2) XXXMapper.xml 파일 상단의 DTD 내용
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

   ---> 여기서부터는 필수 사항
   4-3) 생성한 XXXMapper.xml 파일의 <mapper> 태그 내의 namespace 속성 설정
         => XXXMapper 인터페이스 지정(패키지명 포함)
         ex) <mapper namespace="com.itwillbs.test3_mybatis.mapper.StudentMapper"></mapper>

   4-4) src/main/resources/mybatis-config.xml 파일 생성(DTD 항목 중 mybatis-3-config.dtd 활용)
        (마이바티스 설정 관련 파일이며 설정 내용은 생략 가능)

  => 여기까지 설정 완료 후 서버 재시작 시 오류가 없어야 한다!!

   4-5) <mapper> 태그 내부에 SQL 구문 실행을 위한 태그 설정

=================================================================================================
[ 스프링 - MyBatis SQL 로그 설정 ]
1. pom.xml 에서 log4j(log4j2) 의 log4jdbc 라이브러리 추가
<!-- 8. SQL 로그에 사용할 log4jdbc-log4j2 라이브러리 -->
<!-- https://mvnrepository.com/artifact/org.bgee.log4jdbc-log4j2/log4jdbc-log4j2-jdbc4.1 -->
<dependency>
	<groupId>org.bgee.log4jdbc-log4j2</groupId>
	<artifactId>log4jdbc-log4j2-jdbc4.1</artifactId>
	<version>1.16</version>
</dependency>

2. JDBC(DBCP) 설정이 있는 root-context.xml 파일 수정
<!-- SQL 로그를 위한 log4jdbc 라이브러리 관련 DBCP 정보 변경(driverClassName, jdbcUrl 속성만 변경) -->
<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
	<property name="driverClassName" value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy"></property>
	<property name="jdbcUrl" value="jdbc:log4jdbc:mysql://localhost:3306/spring_mvc_board5">	</property>
	<property name="username" value="root"></property>
	<property name="password" value="1234"></property>
</bean>
=> driverClassName 은 log4jdbc 드라이버로 교체(내부적으로 MySQL Connector 드라이버와 연결됨)
=> jdbcUrl 은 기존 URL 에서 jdbc 와 mysql 사이에 log4jdbc 추가

3. src/main/resources 위치에 log4jdbc.log4j2.properties 파일 생성 후 다음 내용 추가
log4jdbc.spylogdelegator.name=net.sf.log4jdbc.log.slf4j.Slf4jSpyLogDelegator
=> 우변의 값은 라이브러리 내의 클래스 지정

아래 두 가지 항목은 생략 가능하나 생략 시 이전 버전의 드라이버 로드됨
log4jdbc.auto.load.popular.drivers=false
=> 자동으로 드라이버 클래스를 로딩하지 않도록 설정
log4jdbc.drivers=com.mysql.cj.jdbc.Driver
=> 개발자가 지정한 드라이버 클래스를 로딩하도록 설정

4. src/main/resources/log4j.xml 파일 수정 및 로그 항목 추가



=================================================================================
[ 트랜잭션 설정 ]
1. root-context.xml 파일에 트랜잭션 관리 객체 설정
<!-- 5. 트랜잭션 설정 -->
<!-- 5-1) <bean> 태그를 사용하여 DataSourceTransactionManager 객체 설정 -->
<!-- id 속성값 "transactionManager" 고정 -->
<!-- class 속성값 "org.springframework.jdbc.datasource.DataSourceTransactionManager" 클래스 지정 -->
<!-- bean 태그 내부에 property 태그에 2번 과정에서 생성한 DataSource 객체의 id 속성값 지정 -->
<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	<property name="dataSource" ref="dataSource"></property>
</bean>
<!-- 5-2) <tx:annotation-driven> 태그를 통해 5-1 과정에서 생성한 트랜잭션 관리 객체 지정 -->
<!-- namespaces 탭에서 tx 항목 추가 필요 -->
<tx:annotation-driven transaction-manager="transactionManager"/>
	
2. servlet-context.xml 파일에 항목 추가
<!-- 트랜잭션 처리에 필요한 tx:annotation-driven 태그 추가(namespaces 탭에서 tx 추가 필요) -->
<tx:annotation-driven/>
===============================================================================
[ insert 태그 기본 문법 ]
<insert id="xxx">
	실행할 INSERT 구문...
</insert>
=> 단, 자바의 JDBC PreparedStatement 객체 사용 시 파라미터를 만능문자(?)로 처리했으나
   마이바티스에서는 #{파라미터명} 으로 데이터를 표시(별도의 치환과정 불필요)
   이 때, 사용될 데이터(파라미터)는 반드시 Mapper 인터페이스에서 메서드 내의 파라미터로 지정되어야한다!
=> Mapper 인터페이스에서 메서드 파라미터로 전달한 객체(XXXVO 등)가 존재할 경우
   해당 객체 내의 멤버변수명을 파라미터명으로 직접 접근 가능(멤버변수명 정확히 지정 필수!)
   (#{xxx.멤버변수명} 대신 #{멤버변수명} 만으로 지정 가능 => 단일 파라미터일 때)
   단, 전달된 파라미터가 복수개일 경우 파라미터명 구분해야함! (#{xxx.멤버변수명} 필수!)
   ex) StudentVO 객체의 name 변수 값을 파라미터로 지정 시
       기존 DAO 클래스에서는 student.getName() 메서드를 호출하여 값을 전달받았지만
       마이바티스에서는 #{name} 형식으로 접근 가능하다!
=> 만약, 단일 파라미터로 VO 객체가 아닌 일반 변수를 전달했을 경우
   변수명을 파라미터명으로 그대로 사용 
   ex) int insertStudent(String name); 일 때 #{name} 형식으로 사용
=> 문자열과 비문자열 데이터 구별없이 #{} 형식으로 파라미터 전달하면
   자동으로 문자열 타입 감지하여 ""('') 기호까지 붙여준다! (pstmt.setString() 메서드 역할)
=> INSERT, UPDATE, DELETE 태그를 통해 SQL 구문 실행 후에는 자동으로 int 타입 결과값이 리턴됨
   (PreparedStatement 객체의 executeUpdate() 메서드와 동일)
=> SQL 구문 작성 시 한 줄 주석은 다음 두 가지 방법 중 한 가지 사용
   1) 일반 HTML 주석과 동일한 주석을 사용(SQL 구문에 포함되지 않음. 로그에 보이지 않음)
   2) '-' 기호 2개와 공백 1개를 조합하여 해당 기호 뒤에 주석문을 작성(로그에 표시됨)






























