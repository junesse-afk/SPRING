<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 
마이바티스에서 실행할 SQL 구문을 갖는 xxxMapper.xml 파일 정의
=> 실행할 각 구문의 이름을 태그로 제공함(inert, update, delete, select 등)
   (내부적으로 PreparedStatement 객체를 통해 SQL 구문을 실행함)
=> 주의! mapper 태그 내의 namespace 속성에 현재 XML 파일과 연결된 자바 인터페이스를 명시
=> 주의! 각 태그 내의 id속성에 지정될 이름은 Mapper 인터페이스 내의 메서드명과 일치해야한다!   
 -->  
<mapper namespace="com.itwillbs.test3_mybatis.mapper.StudentMapper">

	<!--
	[ insert 태그 기본 문법 ] 	
	<insert id="xxx">
		실행할 INSERT 구문
	</insert> 
	=> 단, 자바의 JDBC PreparedStatement 객체 사용 시 파라미터를 ?로 처리했으나
	  마이바티스에서는 #{파라미터명} 으로 데이터를 표시(별도의 치환과정 불필요)
	-->
	
	<!-- 학생정보 등록 - INSERT -->
	<insert id="registStudent">
		INSERT INTO STUDENT
			 ( IDX
			 , NAME)
		VALUES (#{idx}	-- 단일 객체이므로 student.idx 대신 idx만 지정
			 , #{name}) -- 단일 객체이므로 student.name 대신 name만 지정
	</insert>

	<!-- 
	[ select 태그 기본 문법 ]
	<select id="xxx" resultType="조회 결과가 저장되어 리턴될 타입">
		실행할 구문...
	</select>
	=> resultType 속성에 기술하는 결과 타입은
	   SELECT 구문을 실행했을 때 기대되는 조회 결과를 저장하여 리턴하기 위한 데이터타입 명시
	   (이때, 해당 변수명과 데이터베이스 테이블의 컬럼명이 일치하는 값만 저장됨)
	   (만약, 조회 결과 데이터를 객체에 저장 시 객체 생성 및 데이터 저장까지 자동으로 수행)
	   (객체가 복수개일 경우 List 객체 등도 자동으로 생성)
	=> 단일 항목의 기본 데이터일 경우 기본 데이터타입(int 등) 또는 String 등을 명시하면 되고
	   복수개의 항목(컬럼) 데이터일 경우 해당 데이터가 묶음으로 관리될 객체 타입을 명시하면 된다.
	   ex) VO, HashMap 타입 등
	=> 단, 사용자 정의 클래스 타입 지정 시 패키지명까지 함께 지정
	  (Alias 기능을 통해 경로명을 생략할 수도 있다! => 마이바티스 추가 설정 필요)  
	  (mybatis-config 파일에
	  <typeAlias alias="Student" type="com.itwillbs.test3_mybatis.vo.StudentVO")    
	 -->	

	<select id="getStudentInfo" resultType="student">
		SELECT *
		  FROM STUDENT
		 WHERE IDX = #{idx} 
	</select>

	<!-- 
	전체 레코드 조회 결과가 List 객체에 저장되지만, 1개 레코드를 저장할 StudentVO 타입을 
	resultType에 기술 하면 자동으로 StudentVO 객체 복수개를 List 객체에 저장해준다!
	-->
	<select id="getStudentList" resultType="student">
		SELECT *
		  FROM STUDENT
	</select>




</mapper> 